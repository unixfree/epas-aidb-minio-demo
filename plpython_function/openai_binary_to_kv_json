CREATE OR REPLACE FUNCTION openai_binary_to_kv_json(bin_image BINARY, mime_type TEXT)
RETURNS JSONB AS $$
    # -- PL/Pythonu Function Body --
    # 필요한 라이브러리를 임포트합니다.
    import requests
    import json
    import base64
    import os

    # --- 설정 ---
    # 서버 환경 변수에서 OpenAI API 키를 가져옵니다.
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        # 환경 변수가 설정되지 않은 경우 에러 JSON을 반환합니다.
        return json.dumps({"error": "OPENAI_API_KEY environment variable is not set on the database server."})

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    # --- 이미지 파일을 Base64로 인코딩 ---
    base64_image = base64.b64encode(bin_image).decode('utf-8')

    # --- OpenAI API 요청 페이로드 생성 ---
    # 한글 인식 및 Key-Value JSON 추출에 최적화된 프롬프트
    prompt_text = """
    당신은 매우 정확한 한글 OCR 전문가입니다. 영어가 있으면 영어도 인식해 주세요
    이 이미지에서 모든 텍스트를 추출한 후, 문서의 구조를 분석하여 의미 있는 Key-Value 쌍의 JSON 객체로 만들어주세요.
    예를 들어, '공급자'라는 텍스트 옆에 회사 이름이 있으면 "공급자": "회사이름" 과 같이 만들어야 합니다.
    날짜, 금액, 주소, 사업자등록번호 등 모든 유의미한 정보를 추출하여 구조화된 JSON으로 반환해주세요.
    만약 구조화가 어려운 일반 텍스트라면, "unstructured_text"라는 키에 전체 텍스트를 담아주세요.
    JSON 형식만 반환하고 다른 설명은 덧붙이지 마세요. key도 가능하면 한글로 해 주세요.
    """

    payload = {
        "model": "gpt-4o",
        "messages": [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:{mime_type};base64,{base64_image}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 4000
    }

    # --- API 호출 및 예외 처리 ---
    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload, timeout=60)
        response.raise_for_status()  # 200번대 상태 코드가 아니면 HTTPError 발생

        # API 응답에서 텍스트 콘텐츠 추출
        api_result_text = response.json()['choices'][0]['message']['content']

        # 모델이 응답을 ```json ... ```으로 감싸는 경우가 있어 처리
        if api_result_text.strip().startswith("```json"):
            json_str = api_result_text.strip()[7:-3].strip()
        else:
            json_str = api_result_text

        # 최종 JSON 객체 반환 (PL/Python이 자동으로 JSONB로 변환)
        return json_str

    except requests.exceptions.RequestException as e:
        # API 호출 실패 시, 응답 본문이 있으면 함께 반환하여 디버깅을 돕습니다.
        error_detail = str(e)
        if e.response is not None:
            try:
                error_detail = e.response.json()
            except json.JSONDecodeError:
                error_detail = e.response.text
        return json.dumps({"error": "API call failed", "details": error_detail})
    except (json.JSONDecodeError, KeyError, IndexError) as e:
        raw_response = response.text if 'response' in locals() else 'No response from API'
        return json.dumps({"error": f"Failed to parse API response: {e}", "raw_response": raw_response})

$$ LANGUAGE plpython3u;
